#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('gossipper:server');
var http = require('http');
console.log('Before dbservice')
var dbService = require('../controllers/dbService');
dbService.init();
console.log('after dbservice')
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
console.log('after io server')
/**
 * Listen on provided port, on all network interfaces.
 */

io.on('connection', function(socket){
  console.log('a user connected');
  socket.on('createNote', function(data) {
    console.log('createNote called');
    dbService.insertNote(data,function(newNote) {
      console.dir(newNote)
      socket.broadcast.emit('onNoteCreated', newNote);
    })    
  });
  socket.on('updateNote', function(data) {
    console.log('updateNote called');
    dbService.updateNote(data, function(modifiedNote) {
      socket.broadcast.emit('onNoteUpdated', modifiedNote);
    });    
  });
  socket.on('deleteNote', function(data) {
    console.log('deleteNote called');
    dbService.deleteNote(data.id,function() {
      socket.broadcast.emit('onNoteDeleted', data);
    });
  });
  socket.on('moveNote', function(data) {
    console.log('moveNote called');
    socket.broadcast.emit('onNoteMoved', data);
  });
  socket.on('getNotes', function() {
    console.log('getNotes called');
    dbService.getAllNotes(function(notes) {
      console.log('getNotes CB called');
      console.dir(notes)
      socket.emit('onNotesList', notes);
    });
  });
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
